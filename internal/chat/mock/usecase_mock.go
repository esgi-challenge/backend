// Code generated by MockGen. DO NOT EDIT.
// Source: internal/chat/usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/chat/usecase.go -destination=internal/chat/mock/usecase_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/esgi-challenge/backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUseCase) Create(chat *models.Channel) (*models.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chat)
	ret0, _ := ret[0].(*models.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), chat)
}

// GetAllByUser mocks base method.
func (m *MockUseCase) GetAllByUser(userId uint) (*[]models.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUser", userId)
	ret0, _ := ret[0].(*[]models.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUser indicates an expected call of GetAllByUser.
func (mr *MockUseCaseMockRecorder) GetAllByUser(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockUseCase)(nil).GetAllByUser), userId)
}

// GetAllPossibleChatStudent mocks base method.
func (m *MockUseCase) GetAllPossibleChatStudent(user *models.User) (*[]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPossibleChatStudent", user)
	ret0, _ := ret[0].(*[]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPossibleChatStudent indicates an expected call of GetAllPossibleChatStudent.
func (mr *MockUseCaseMockRecorder) GetAllPossibleChatStudent(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPossibleChatStudent", reflect.TypeOf((*MockUseCase)(nil).GetAllPossibleChatStudent), user)
}

// GetAllPossibleChatTeacher mocks base method.
func (m *MockUseCase) GetAllPossibleChatTeacher(user *models.User) (*[]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPossibleChatTeacher", user)
	ret0, _ := ret[0].(*[]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPossibleChatTeacher indicates an expected call of GetAllPossibleChatTeacher.
func (mr *MockUseCaseMockRecorder) GetAllPossibleChatTeacher(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPossibleChatTeacher", reflect.TypeOf((*MockUseCase)(nil).GetAllPossibleChatTeacher), user)
}

// GetById mocks base method.
func (m *MockUseCase) GetById(id uint) (*models.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUseCaseMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUseCase)(nil).GetById), id)
}

// SaveMessage mocks base method.
func (m *MockUseCase) SaveMessage(msg *models.Message) (*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", msg)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockUseCaseMockRecorder) SaveMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockUseCase)(nil).SaveMessage), msg)
}
