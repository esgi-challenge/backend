// Code generated by MockGen. DO NOT EDIT.
// Source: internal/document/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/document/repository.go -destination=internal/document/mock/repository_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/esgi-challenge/backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(document *models.Document) (*models.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", document)
	ret0, _ := ret[0].(*models.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), document)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// GetAllBySchoolId mocks base method.
func (m *MockRepository) GetAllBySchoolId(schoolId uint) (*[]models.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBySchoolId", schoolId)
	ret0, _ := ret[0].(*[]models.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBySchoolId indicates an expected call of GetAllBySchoolId.
func (mr *MockRepositoryMockRecorder) GetAllBySchoolId(schoolId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBySchoolId", reflect.TypeOf((*MockRepository)(nil).GetAllBySchoolId), schoolId)
}

// GetAllByUserId mocks base method.
func (m *MockRepository) GetAllByUserId(userId uint) (*[]models.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserId", userId)
	ret0, _ := ret[0].(*[]models.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserId indicates an expected call of GetAllByUserId.
func (mr *MockRepositoryMockRecorder) GetAllByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserId", reflect.TypeOf((*MockRepository)(nil).GetAllByUserId), userId)
}

// GetById mocks base method.
func (m *MockRepository) GetById(id uint) (*models.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), id)
}
