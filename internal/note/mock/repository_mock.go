// Code generated by MockGen. DO NOT EDIT.
// Source: internal/note/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/note/repository.go -destination=internal/note/mock/repository_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/esgi-challenge/backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(note *models.Note) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", note)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), note)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// GetAllByStudent mocks base method.
func (m *MockRepository) GetAllByStudent(studentId uint) (*[]models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByStudent", studentId)
	ret0, _ := ret[0].(*[]models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByStudent indicates an expected call of GetAllByStudent.
func (mr *MockRepositoryMockRecorder) GetAllByStudent(studentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByStudent", reflect.TypeOf((*MockRepository)(nil).GetAllByStudent), studentId)
}

// GetAllByTeacher mocks base method.
func (m *MockRepository) GetAllByTeacher(teacherId uint) (*[]models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByTeacher", teacherId)
	ret0, _ := ret[0].(*[]models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByTeacher indicates an expected call of GetAllByTeacher.
func (mr *MockRepositoryMockRecorder) GetAllByTeacher(teacherId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByTeacher", reflect.TypeOf((*MockRepository)(nil).GetAllByTeacher), teacherId)
}

// GetById mocks base method.
func (m *MockRepository) GetById(id uint) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), id)
}

// GetByIdPreload mocks base method.
func (m *MockRepository) GetByIdPreload(id uint) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdPreload", id)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdPreload indicates an expected call of GetByIdPreload.
func (mr *MockRepositoryMockRecorder) GetByIdPreload(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdPreload", reflect.TypeOf((*MockRepository)(nil).GetByIdPreload), id)
}

// Update mocks base method.
func (m *MockRepository) Update(id uint, note *models.Note) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, note)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(id, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), id, note)
}
