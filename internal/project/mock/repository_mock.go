// Code generated by MockGen. DO NOT EDIT.
// Source: internal/project/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/project/repository.go -destination=internal/project/mock/repository_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/esgi-challenge/backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(project *models.Project) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", project)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), project)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// DeleteJoined mocks base method.
func (m *MockRepository) DeleteJoined(projectId, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJoined", projectId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJoined indicates an expected call of DeleteJoined.
func (mr *MockRepositoryMockRecorder) DeleteJoined(projectId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJoined", reflect.TypeOf((*MockRepository)(nil).DeleteJoined), projectId, userId)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll(user *models.User) (*[]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", user)
	ret0, _ := ret[0].(*[]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), user)
}

// GetAllByTeacher mocks base method.
func (m *MockRepository) GetAllByTeacher(user *models.User) (*[]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByTeacher", user)
	ret0, _ := ret[0].(*[]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByTeacher indicates an expected call of GetAllByTeacher.
func (mr *MockRepositoryMockRecorder) GetAllByTeacher(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByTeacher", reflect.TypeOf((*MockRepository)(nil).GetAllByTeacher), user)
}

// GetById mocks base method.
func (m *MockRepository) GetById(user *models.User, id uint) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", user, id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), user, id)
}

// GetGroups mocks base method.
func (m *MockRepository) GetGroups(user *models.User, id uint) (*[]models.ProjectStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", user, id)
	ret0, _ := ret[0].(*[]models.ProjectStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockRepositoryMockRecorder) GetGroups(user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockRepository)(nil).GetGroups), user, id)
}

// GetJoined mocks base method.
func (m *MockRepository) GetJoined(projectId, userId uint) (*[]models.ProjectStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJoined", projectId, userId)
	ret0, _ := ret[0].(*[]models.ProjectStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJoined indicates an expected call of GetJoined.
func (mr *MockRepositoryMockRecorder) GetJoined(projectId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJoined", reflect.TypeOf((*MockRepository)(nil).GetJoined), projectId, userId)
}

// GetPreloadById mocks base method.
func (m *MockRepository) GetPreloadById(id uint) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreloadById", id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreloadById indicates an expected call of GetPreloadById.
func (mr *MockRepositoryMockRecorder) GetPreloadById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreloadById", reflect.TypeOf((*MockRepository)(nil).GetPreloadById), id)
}

// JoinProject mocks base method.
func (m *MockRepository) JoinProject(project *models.ProjectStudent) (*models.ProjectStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinProject", project)
	ret0, _ := ret[0].(*models.ProjectStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinProject indicates an expected call of JoinProject.
func (mr *MockRepositoryMockRecorder) JoinProject(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinProject", reflect.TypeOf((*MockRepository)(nil).JoinProject), project)
}

// Update mocks base method.
func (m *MockRepository) Update(id uint, project *models.Project) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, project)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(id, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), id, project)
}
