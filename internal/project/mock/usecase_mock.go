// Code generated by MockGen. DO NOT EDIT.
// Source: internal/project/usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/project/usecase.go -destination=internal/project/mock/usecase_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/esgi-challenge/backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUseCase) Create(user *models.User, project *models.Project) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user, project)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(user, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), user, project)
}

// Delete mocks base method.
func (m *MockUseCase) Delete(user *models.User, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", user, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUseCaseMockRecorder) Delete(user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), user, id)
}

// GetAll mocks base method.
func (m *MockUseCase) GetAll(user *models.User) (*[]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", user)
	ret0, _ := ret[0].(*[]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUseCaseMockRecorder) GetAll(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUseCase)(nil).GetAll), user)
}

// GetById mocks base method.
func (m *MockUseCase) GetById(user *models.User, id uint) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", user, id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUseCaseMockRecorder) GetById(user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUseCase)(nil).GetById), user, id)
}

// GetGroups mocks base method.
func (m *MockUseCase) GetGroups(user *models.User, id uint) ([]*models.ProjectGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", user, id)
	ret0, _ := ret[0].([]*models.ProjectGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockUseCaseMockRecorder) GetGroups(user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockUseCase)(nil).GetGroups), user, id)
}

// JoinProject mocks base method.
func (m *MockUseCase) JoinProject(user *models.User, join *models.ProjectStudentCreate, id uint) (*models.ProjectStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinProject", user, join, id)
	ret0, _ := ret[0].(*models.ProjectStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinProject indicates an expected call of JoinProject.
func (mr *MockUseCaseMockRecorder) JoinProject(user, join, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinProject", reflect.TypeOf((*MockUseCase)(nil).JoinProject), user, join, id)
}

// QuitProject mocks base method.
func (m *MockUseCase) QuitProject(user *models.User, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuitProject", user, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuitProject indicates an expected call of QuitProject.
func (mr *MockUseCaseMockRecorder) QuitProject(user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuitProject", reflect.TypeOf((*MockUseCase)(nil).QuitProject), user, id)
}

// Update mocks base method.
func (m *MockUseCase) Update(user *models.User, id uint, updatedProject *models.Project) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user, id, updatedProject)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUseCaseMockRecorder) Update(user, id, updatedProject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUseCase)(nil).Update), user, id, updatedProject)
}
