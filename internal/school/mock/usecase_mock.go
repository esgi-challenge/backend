// Code generated by MockGen. DO NOT EDIT.
// Source: internal/school/usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/school/usecase.go -destination=internal/school/mock/usecase_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/esgi-challenge/backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUseCase) AddUser(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUseCaseMockRecorder) AddUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUseCase)(nil).AddUser), user)
}

// Create mocks base method.
func (m *MockUseCase) Create(user *models.User, school *models.SchoolCreate) (*models.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user, school)
	ret0, _ := ret[0].(*models.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(user, school any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), user, school)
}

// Delete mocks base method.
func (m *MockUseCase) Delete(user *models.User, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", user, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUseCaseMockRecorder) Delete(user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), user, id)
}

// GetAll mocks base method.
func (m *MockUseCase) GetAll() (*[]models.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]models.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUseCaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUseCase)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockUseCase) GetById(id uint) (*models.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUseCaseMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUseCase)(nil).GetById), id)
}

// GetByUser mocks base method.
func (m *MockUseCase) GetByUser(user *models.User) (*models.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", user)
	ret0, _ := ret[0].(*models.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockUseCaseMockRecorder) GetByUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockUseCase)(nil).GetByUser), user)
}

// GetSchoolStudents mocks base method.
func (m *MockUseCase) GetSchoolStudents(schoolId uint) (*[]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchoolStudents", schoolId)
	ret0, _ := ret[0].(*[]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchoolStudents indicates an expected call of GetSchoolStudents.
func (mr *MockUseCaseMockRecorder) GetSchoolStudents(schoolId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchoolStudents", reflect.TypeOf((*MockUseCase)(nil).GetSchoolStudents), schoolId)
}

// GetSchoolTeachers mocks base method.
func (m *MockUseCase) GetSchoolTeachers(schoolId uint) (*[]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchoolTeachers", schoolId)
	ret0, _ := ret[0].(*[]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchoolTeachers indicates an expected call of GetSchoolTeachers.
func (mr *MockUseCaseMockRecorder) GetSchoolTeachers(schoolId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchoolTeachers", reflect.TypeOf((*MockUseCase)(nil).GetSchoolTeachers), schoolId)
}

// Invite mocks base method.
func (m *MockUseCase) Invite(user *models.User, school *models.SchoolInvite) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invite", user, school)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invite indicates an expected call of Invite.
func (mr *MockUseCaseMockRecorder) Invite(user, school any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invite", reflect.TypeOf((*MockUseCase)(nil).Invite), user, school)
}

// RemoveUser mocks base method.
func (m *MockUseCase) RemoveUser(userId uint, userKind models.UserKind, school *models.School) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", userId, userKind, school)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUseCaseMockRecorder) RemoveUser(userId, userKind, school any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUseCase)(nil).RemoveUser), userId, userKind, school)
}
