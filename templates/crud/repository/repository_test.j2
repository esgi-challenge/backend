package repository

import (
	"errors"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/esgi-challenge/backend/internal/models"
	"github.com/stretchr/testify/assert"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func setupMockDB(t *testing.T) (*gorm.DB, sqlmock.Sqlmock) {
	db, mock, err := sqlmock.New()
	assert.NoError(t, err)

	dialector := postgres.New(postgres.Config{
		Conn:       db,
		DriverName: "postgres",
	})
	gormDB, err := gorm.Open(dialector, &gorm.Config{})
	assert.NoError(t, err)

	return gormDB, mock
}

func TestCreate(t *testing.T) {
	t.Parallel()

	db, mock := setupMockDB(t)
	repo := New{{ name }}Repository(db)

	{{ name_lower }} := &models.{{ name }}{
		Title:       "title",
		Description: "description",
	}

	t.Run("Create", func(t *testing.T) {
		mock.ExpectBegin()
		// Should be ExpectExec because of INSERT query, but ExpectQuery needed (known issue)
		// https://github.com/DATA-DOG/go-sqlmock/issues/118
		mock.ExpectQuery(createQuery).
			WithArgs(sqlmock.AnyArg(), sqlmock.AnyArg(), nil, {{ name_lower }}.Title, {{ name_lower }}.Description).
			WillReturnRows(sqlmock.NewRows([]string{"id", "title", "comment"}).AddRow({{ name_lower }}.ID, {{ name_lower }}.Title, {{ name_lower }}.Description))
		mock.ExpectCommit()

		created{{ name }}, err := repo.Create({{ name_lower }})

		assert.NoError(t, err)
		assert.NotNil(t, created{{ name }})
		assert.Equal(t, created{{ name }}, {{ name_lower }})
		assert.NoError(t, mock.ExpectationsWereMet())
	})

	t.Run("Create Error", func(t *testing.T) {
		mock.ExpectBegin()
		mock.ExpectQuery(createQuery).
			WithArgs(sqlmock.AnyArg(), sqlmock.AnyArg(), nil, {{ name_lower }}.Title, {{ name_lower }}.Description).
			WillReturnError(errors.New("create failed"))
		mock.ExpectRollback()

		created{{ name }}, err := repo.Create({{ name_lower }})

		assert.Error(t, err)
		assert.Nil(t, created{{ name }})
		assert.EqualError(t, err, "create failed")
		assert.NoError(t, mock.ExpectationsWereMet())
	})
}

func TestGetAll(t *testing.T) {
	t.Parallel()

	db, mock := setupMockDB(t)
	repo := New{{ name }}Repository(db)

	{{ name_lower }}1 := models.{{ name }}{
		Title:       "title1",
		Description: "description1",
	}

	{{ name_lower }}2 := models.{{ name }}{
		Title:       "title2",
		Description: "description2",
	}

	t.Run("Get All", func(t *testing.T) {
		rows := sqlmock.NewRows([]string{"id", "title", "description"}).
			AddRow({{ name_lower }}1.ID, {{ name_lower }}1.Title, {{ name_lower }}1.Description).
			AddRow({{ name_lower }}2.ID, {{ name_lower }}2.Title, {{ name_lower }}2.Description)

		mock.ExpectQuery(getAllQuery).
			WillReturnRows(rows)

		{{ name_lower }}s, err := repo.GetAll()

		assert.NoError(t, err)
		assert.NotNil(t, {{ name_lower }}s)
		assert.Len(t, *{{ name_lower }}s, 2)
		assert.Equal(t, &{{ name_lower }}1, &(*{{ name_lower }}s)[0])
		assert.Equal(t, &{{ name_lower }}2, &(*{{ name_lower }}s)[1])
		assert.NoError(t, mock.ExpectationsWereMet())
	})

	t.Run("Get All Error", func(t *testing.T) {
		mock.ExpectQuery(getAllQuery).
			WillReturnError(errors.New("get all failed"))

		{{ name_lower }}s, err := repo.GetAll()

		assert.Error(t, err)
		assert.Nil(t, {{ name_lower }}s)
		assert.EqualError(t, err, "get all failed")
		assert.NoError(t, mock.ExpectationsWereMet())
	})
}

func TestGetById(t *testing.T) {
	t.Parallel()

	db, mock := setupMockDB(t)
	repo := New{{ name }}Repository(db)

	{{ name_lower }} := models.{{ name }}{
		Title:       "title",
		Description: "description",
	}

	t.Run("Get By Id", func(t *testing.T) {
		row := sqlmock.NewRows([]string{"id", "title", "description"}).
			AddRow({{ name_lower }}.ID, {{ name_lower }}.Title, {{ name_lower }}.Description)

		mock.ExpectQuery(getQuery).
			WillReturnRows(row)

		db{{ name }}, err := repo.GetById({{ name_lower }}.ID)

		assert.NoError(t, err)
		assert.NotNil(t, db{{ name }})
		assert.Equal(t, db{{ name }}, &{{ name_lower }})
		assert.NoError(t, mock.ExpectationsWereMet())
	})

	t.Run("Get By Id Error", func(t *testing.T) {
		mock.ExpectQuery(getQuery).
			WillReturnError(errors.New("get failed"))

		{{ name_lower }}, err := repo.GetById(1)

		assert.Error(t, err)
		assert.Nil(t, {{ name_lower }})
		assert.EqualError(t, err, "get failed")
		assert.NoError(t, mock.ExpectationsWereMet())
	})
}

func TestDelete(t *testing.T) {
	t.Parallel()

	db, mock := setupMockDB(t)
	repo := New{{ name }}Repository(db)

	t.Run("Delete", func(t *testing.T) {

		mock.ExpectBegin()
		mock.ExpectExec(deleteQuery).
			WithArgs(sqlmock.AnyArg(), 1).
			WillReturnResult(sqlmock.NewResult(1, 1))
		mock.ExpectCommit()

		err := repo.Delete(1)

		assert.NoError(t, err)
		assert.NoError(t, mock.ExpectationsWereMet())
	})

	t.Run("delete Error", func(t *testing.T) {
		mock.ExpectBegin()
		mock.ExpectExec(deleteQuery).
			WithArgs(sqlmock.AnyArg(), 1).
			WillReturnError(errors.New("delete failed"))
		mock.ExpectRollback()

		err := repo.Delete(1)

		assert.Error(t, err)
		assert.EqualError(t, err, "delete failed")
		assert.NoError(t, mock.ExpectationsWereMet())
	})
}

func TestUpdate(t *testing.T) {
	t.Parallel()

	db, mock := setupMockDB(t)
	repo := New{{ name }}Repository(db)

	{{ name_lower }} := &models.{{ name }}{
		Title:       "title",
		Description: "description",
	}

	t.Run("Update", func(t *testing.T) {
		mock.ExpectBegin()
		mock.ExpectQuery(updateQuery).
			WithArgs(sqlmock.AnyArg(), sqlmock.AnyArg(), nil, {{ name_lower }}.Title, {{ name_lower }}.Description).
			WillReturnRows(sqlmock.NewRows([]string{"id", "title", "comment"}).AddRow({{ name_lower }}.ID, {{ name_lower }}.Title, {{ name_lower }}.Description))
		mock.ExpectCommit()

		updated{{ name }}, err := repo.Update(1, {{ name_lower }})

		assert.NoError(t, err)
		assert.NotNil(t, updated{{ name }})
		assert.Equal(t, updated{{ name }}, {{ name_lower }})
		assert.NoError(t, mock.ExpectationsWereMet())
	})

	t.Run("Update Error", func(t *testing.T) {
		mock.ExpectBegin()
		mock.ExpectQuery(updateQuery).
			WithArgs(sqlmock.AnyArg(), sqlmock.AnyArg(), nil, {{ name_lower }}.Title, {{ name_lower }}.Description).
			WillReturnError(errors.New("update failed"))
		mock.ExpectRollback()

		updated{{ name }}, err := repo.Create({{ name_lower }})

		assert.Error(t, err)
		assert.Nil(t, updated{{ name }})
		assert.EqualError(t, err, "update failed")
		assert.NoError(t, mock.ExpectationsWereMet())
	})
}
