package usecase

import (
	"errors"
	"testing"

	"github.com/esgi-challenge/backend/internal/{{ name_lower }}/mock"
	"github.com/esgi-challenge/backend/internal/models"
	"github.com/esgi-challenge/backend/pkg/logger"
	"github.com/stretchr/testify/assert"
	"go.uber.org/mock/gomock"
)

func TestCreate(t *testing.T) {
	t.Parallel()

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	logger := logger.NewLogger()
	mockRepo := mock.NewMockRepository(ctrl)
	useCase := New{{ name }}UseCase(nil, mockRepo, logger)

	{{ name_lower }} := &models.{{ name }}{
		Title:       "title",
		Description: "description",
	}

	mockRepo.EXPECT().Create({{ name_lower }}).Return({{ name_lower }}, nil)

	created{{ name }}, err := useCase.Create({{ name_lower }})

	assert.NoError(t, err)
	assert.NotNil(t, created{{ name }})
}

func TestGetById(t *testing.T) {
	t.Parallel()

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	logger := logger.NewLogger()
	mockRepo := mock.NewMockRepository(ctrl)
	useCase := New{{ name }}UseCase(nil, mockRepo, logger)

	{{ name_lower }} := &models.{{ name }}{
		Title:       "title",
		Description: "description",
	}

	mockRepo.EXPECT().GetById({{ name_lower }}.ID).Return({{ name_lower }}, nil)

	db{{ name }}, err := useCase.GetById({{ name_lower }}.ID)

	assert.NoError(t, err)
	assert.NotNil(t, db{{ name }})
}

func TestGetAll(t *testing.T) {
	t.Parallel()

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	logger := logger.NewLogger()
	mockRepo := mock.NewMockRepository(ctrl)
	useCase := New{{ name }}UseCase(nil, mockRepo, logger)

	{{ name_lower }}s := &[]models.{{ name }}{
		{
			Title:       "title1",
			Description: "description1",
		},
		{
			Title:       "title2",
			Description: "description2",
		},
	}

	mockRepo.EXPECT().GetAll().Return({{ name_lower }}s, nil)

	db{{ name }}s, err := useCase.GetAll()

	assert.NoError(t, err)
	assert.NotNil(t, db{{ name }}s)
	assert.Len(t, *db{{ name }}s, 2)
	assert.Equal(t, &(*{{ name_lower }}s)[0], &(*db{{ name }}s)[0])
	assert.Equal(t, &(*{{ name_lower }}s)[1], &(*db{{ name }}s)[1])
}

func TestDelete(t *testing.T) {
	t.Parallel()

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	logger := logger.NewLogger()
	mockRepo := mock.NewMockRepository(ctrl)
	useCase := New{{ name }}UseCase(nil, mockRepo, logger)

	{{ name_lower }} := &models.{{ name }}{
		Title:       "title",
		Description: "description",
	}

	t.Run("Delete", func(t *testing.T) {
		mockRepo.EXPECT().GetById({{ name_lower }}.ID).Return({{ name_lower }}, nil)
		mockRepo.EXPECT().Delete({{ name_lower }}.ID).Return(nil)

		err := useCase.Delete({{ name_lower }}.ID)

		assert.NoError(t, err)
	})

	t.Run("Delete Not found", func(t *testing.T) {
		mockRepo.EXPECT().GetById(uint(10)).Return(nil, errors.New("Not found"))

		err := useCase.Delete(uint(10))

		assert.Error(t, err)
		assert.EqualError(t, err, "Not found")
	})
}

func TestUpdate(t *testing.T) {
	t.Parallel()

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	logger := logger.NewLogger()
	mockRepo := mock.NewMockRepository(ctrl)
	useCase := New{{ name }}UseCase(nil, mockRepo, logger)

	{{ name_lower }} := &models.{{ name }}{
		Title:       "title",
		Description: "description",
	}

	fixed{{ name }} := &models.{{ name }}{
		Title:       "title updated",
		Description: "description",
	}

	t.Run("Update", func(t *testing.T) {
		mockRepo.EXPECT().GetById({{ name_lower }}.ID).Return({{ name_lower }}, nil)
		mockRepo.EXPECT().Update({{ name_lower }}.ID, fixed{{ name }}).Return(fixed{{ name }}, nil)

		updated{{ name }}, err := useCase.Update({{ name_lower }}.ID, fixed{{ name }})

		assert.NoError(t, err)
		assert.NotNil(t, updated{{ name }})
		assert.Equal(t, updated{{ name }}, fixed{{ name }})
	})

	t.Run("Update Not found", func(t *testing.T) {
		mockRepo.EXPECT().GetById(uint(10)).Return(nil, errors.New("Not found"))

		updated{{ name }}, err := useCase.Update(uint(10), fixed{{ name }})

		assert.Error(t, err)
		assert.Nil(t, updated{{ name }})
		assert.EqualError(t, err, "Not found")
	})
}
